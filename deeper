#!/usr/bin/env python3

from time import perf_counter
from concurrent import futures
from os import getcwd, system
from random import shuffle
from subprocess import run
from typing import List
import arg_parse_deeper
import exceptor


class Deeper:

    def __init__(self):
        self.args = arg_parse_deeper.Argparse_Deeper()
        self.argparse = self.args.get_args()
        self.port = self.args.port
        self.top_ports: int = 0
        self.open_ports: List = []
        self.pwd: str = getcwd()
        self.top_ten_list: List = ["21","22","23","25","80","110","139","143","443","445","3389"]
        self.internal_ports: List = ["21", "22","23","25", "53", "67", "68", "69", "101", "123", "161", "80","110",
                               "135", "139","143","443","445", "3389", "4786", "5800", "5801", "5808", "5809",
                               "5900", "5901", "5909", "500", "88", "4434", "4343", "4500", "8080", "8081",
                               "8082", "8083", "8088", "8200", "8211", "8888", "9999", "9090", "7777", "389",
                               "636",  "1801", "1810, ""1433", "1434", "2382", "2383", "1521", "1630", "3938",
                               "3200", "3300", "8000", "3306", "33060", "990", "1027", "2068", "6380", "6379",
                               "8089", "9997", "514", "27017", "27018", "27019", "18209", "18210", "18211",
                               "9000"]
        self.scada_ports = []


    def get_top_ports_list(self, protocol: str) -> List:
        try:
            cwd = getcwd()
            if self.top_ports:
                if self.top_ports == 100:
                    path = cwd + "/top_100.txt"
                if self.top_ports == 2:
                    path = cwd + "/top_2000.txt"
                if self.top_ports == 3:
                    path = cwd + "/top_3000.txt"
                if self.top_ports == 4:
                    path = cwd + "/top_4000.txt"
                if self.top_ports == 5:
                    path = cwd + "/top_5000.txt"
                if self.top_ports == 6:
                    path = cwd + "/top_6000.txt"
                if self.top_ports == 7:
                    path = cwd + "/top_7000.txt"
                if self.top_ports == 8:
                    path = cwd + "/top_8306.txt"
            elif "tcp" in protocol:
                path = cwd + "/tcp_ports_1000.txt"
            elif "udp" in protocol:
                path = cwd + "/udp_ports_1000.txt"
            else:
                raise Exception
            with open(path, "r") as file:
                ports = file.readlines()
                ports = [p.rstrip("\n") for p in ports]
            if not self.args.no_random:
                shuffle(ports)
            return ports
        except Exception as e:
            exceptor.Exceptor().catchit("get_top_ports_list", str(e))


    def get_ports(self) -> List:
        try:
            ports = [str(i) for i in range(int(self.args.min), int(self.args.max)+1)]
            if not self.args.no_random:
                shuffle(ports)
            return ports
        except Exception as e:
            exceptor.Exceptor().catchit("get_ports", str(e))


    def build_mask_addresses(self, ip: str, mask: str) -> List:
         try:
            oct1, oct2, oct3, oct4 = ip.split(".")
            third_octets = [int(oct3) + i for i in range(0, 255)]
            addresses = []
            for third in third_octets:
                if third > 255:
                    raise AssertionError
                ips = [str(oct1) + "." + str(oct2) + "." + str(third) + "." +
                       str(i) for i in range(0, 255)]
                addresses = addresses + ips
                if mask == "24":
                    if third == int(oct3):
                        return addresses
                if mask == "23":
                    if third == int(oct3) + 1:
                        return addresses
                if mask == "22":
                    if third == int(oct3) + 3:
                        return addresses
                if mask == "21":
                    if third == int(oct3) + 7:
                        return addresses
                if mask == "20":
                    if third == int(oct3) + 15:
                        return addresses
                if mask == "16":
                    if third == int(oct3) + 254:
                        return addresses
         except AssertionError as a:
             exceptor.Exceptor().catchit("build_mask_addresses: Third Octet exceeded 255.", str(a))
         except Exception as e:
             exceptor.Exceptor().catchit("build_mask_addresses", str(e))


    def get_mask_addresses(self, ip: str, mask: str) -> List:
        try:
            if (int(mask) > 19 and int(mask) < 24
                    or int(mask) == 16
                    or int(mask) == 24):
                addresses = self.build_mask_addresses(ip, mask)
                return addresses
            else:
                print("\n Sorry... only /16 /20 /21 /22 /23 and /24 networks are permitted.\n")
                exit(1)
        except Exception as e:
            exceptor.Exceptor().catchit("get_mask_addresses", str(e))


    def ip_cmd(self, ip: str):
        try:
            cmd = (self.args.command + str(ip) + " " + self.args.scan_type + " -p " +
                   self.port + " >> " + self.args.logfile)
            print(cmd)
            run([cmd], shell=True)
        except Exception as e:
            exceptor.Exceptor().catchit("ip_cmd", str(e))


    def ip_cmd_runner(self, addresses: List):
        try:
            with futures.ProcessPoolExecutor(self.args.procs) as pool:
                pool.map(self.ip_cmd, addresses)
        except Exception as e:
            exceptor.Exceptor().catchit("ip_cmd_runner", str(e))


    def ip_controller(self):
        try:
            net, mask = self.args.target.split("/")
            addresses = self.get_mask_addresses(str(net), str(mask))
            self.ip_cmd_runner(addresses)
        except Exception as e:
            exceptor.Exceptor().catchit("ip_controller", str(e))


    def command_runner(self, port: str):
        try:
            cmd = (self.args.command + self.args.target + " " + self.args.scan_type +
                   " -p " + port + " >> " + self.args.logfile)
            print(cmd)
            run([cmd], shell=True)
        except Exception as e:
            exceptor.Exceptor().catchit("command_runner", str(e))


    def controller(self, ports: List):
        try:
            with futures.ProcessPoolExecutor(self.args.procs) as pool:
                pool.map(self.command_runner, ports)
        except Exception as e:
            exceptor.Exceptor().catchit("controller", str(e))


    def port_controller(self) -> List:
        try:
            if self.args.internal_assessment:
                ports = self.internal_ports
            elif self.args.top_ports:
                ports = self.args.top_ports
            elif self.args.top_tcp:
                ports = self.get_top_ports_list("tcp")
            elif self.args.top_udp:
                ports = self.get_top_ports_list("udp")
            elif self.args.port:
                ports = [self.args.port]
            elif self.args.port_list:
                ports = [p for p in self.args.port_list for p in p]
            elif self.args.top_ten:
                ports = self.top_ten_list
            elif self.args.port:
                ports = [self.args.port]
            else:
                ports = self.get_ports()
            return ports
        except Exception as e:
            exceptor.Exceptor().catchit("port_controller", str(e))


    def banner(self):
        try:
            system("clear")

            print(("***************************************************************************", ))
            print(("*  ________ ", ))
            print(("*  ___  __ \_____ _____ ________ _____ ________", ))
            print(("*  __  / / /_  _ \_  _ \___  __ \_  _ \__  ___/", ))
            print(("*  _  /_/ / /  __//  __/__  /_/ //  __/_  /    ", ))
            print(("*  /_____/  \___/ \___/ _  .___/ \___/ /_/", ))
            print(("*                       /_/     ", ))
            print(("*\n* Know thy self, know thy enemy. A thousand battles, a thousand victories.", ))
            print(("***************************************************************************", ))
        except Exception as e:
            exceptor.Exceptor().catchit("banner", str(e))


    def writer(self, text: List):
        try:
            with open(self.args.logfile, "a") as file:
                file.writelines(text)
        except Exception as e:
            print("Error! in writer " + str(e))


    def go_deeper(self, opens: List):
        try:
            cmds = ["nmap -T2 -Pn -sS --reason -sCV --script=/usr/share/nmap/scripts/vulners.nse  " \
                    "--version-all -p " + opens[x][0] + " " + opens[x][1] for x in range(opens.__len__())]
            self.command_mapper(cmds)
        except Exception as e:
            exceptor.Exceptor().catchit("go_deeper", e)


    def command_mapper(self, cmds: List):
        try:
            with futures.ProcessPoolExecutor(self.args.procs) as pool:
                pool.map(self.command_exec, cmds)
        except Exception as e:
            exceptor.Exceptor().catchit("command_mapper", e)


    def command_exec(self, cmd):
        try:
            print("\nCommand executed: \n" + cmd)
            run([cmd], shell=True)
        except Exception as e:
            exceptor.Exceptor().catchit("command_exec", e)


    def display_results(self):
        try:
            t1 = perf_counter()
            with open(self.args.logfile, "r") as file:
                logs = file.readlines()
                if not logs:
                    print("log file empty.")
                    raise Exception
                down = [l for l  in logs if "host down" in l]
                [print("Host appears down: " + d) for d in down]
                ports = [l for l in logs if "tcp" in l or "udp" in l]
                if not ports:
                    print("Host/s seem to be down..")
                    print("logs file empty.")
                    raise Exception
                ports = [l for l in logs if "tcp" in l or "udp" in l]
                if not ports:
                    raise Exception
                [print(p.rstrip("\n")) for p in ports]
                closed = [p for p in ports if "closed" in p]
                filter = [p for p in ports if "filter" in p]
                open_ports = [p for p in ports if "Discovered open" in p
                              and not "closed" in p and not "filter" in p]
                total = len(ports)
                num_cl = len(closed)
                num_fl = len(filter)
                num_op = len(open_ports)
                total = total - num_op
                print("\n******************************************************\n"
                      "Total Ports Scanned: " + str(total))
                print("Closed: " + str(num_cl))
                print("Filtered: " + str(num_fl))
                print("Open: " + str(num_op))
                if num_op > 0:
                    open_text = "\n********** Open Ports **********\n"
                    stars = "\n*********************************\n"
                    print(open_text)
                    [print(o.rstrip()) for o in open_ports]
                    print(stars)
                    self.writer([open_text])
                    self.writer(open_ports)
                    self.writer([stars])
                    if self.args.deeper:
                        opens = [tuple(o[21:].strip("\n").split("/tcp on ")) for o in open_ports]
                        print("\nProceeding Deeper... \n")
                        self.go_deeper(opens)
                else:
                    print("\nNo ports discovered open. :(")
            t2 = perf_counter()
            print("\nTime to calculate and display results: " + str(round(t2-t1, 4)) + "sec\n")
        except Exception as e:
            exceptor.Exceptor().catchit("display_results", str(e))


if __name__ == '__main__':
    try:
        t1 = perf_counter()
        new_Nmap = Deeper()
        new_Nmap.banner()
        vulners = new_Nmap.pwd + "/vulners.nse"
        run(["cp " + vulners + " /usr/share/nmap/scripts"], shell=True)
        run(["NMAPDIR=" + new_Nmap.pwd], shell=True)
        print("\nWARNING! This program intentionally utalises system resources for performance.\n"
              "Your system may become temporarily unresponsive.\n\nProcessing..")
        ports = new_Nmap.port_controller()
        if new_Nmap.args.ip_splitting:
            for p in ports:
                new_Nmap.port = str(p)
                new_Nmap.ip_controller()
        else:
            new_Nmap.controller(ports)
        print("Calculating results..")
        new_Nmap.display_results()
        t2 = perf_counter()
        print("\nTotal Execution Time: " + str(round(t2 - t1, 4)) + "sec\n")
        system("stty sane")
    except Exception as e:
        exceptor.Exceptor().catchit("main()", e)

